---
version: 1.2.7
title: save existing entity query
file: ./test/entity_test.gleam
test_name: save_existing_entity_should_update_query_test
---
Update(Update(
  Table(
    "addresses",
    [
      Address(AddressId),
      Address(Street),
      Address(City),
      Address(AddressCustomer),
    ],
    dict.from_list([
      #(
        Address(AddressCustomer),
        IntColumn(
          Address(AddressCustomer),
          "customer_id",
          ColumnConstraint(
            NotNull,
            ForeignKey(
              [Customer(CustomerId)],
              OnDelete(Restrict),
              OnUpdate(Cascade),
            ),
            NoDefault,
            NotPrimaryKey,
            NotUnique,
          ),
        ),
      ),
      #(
        Address(AddressId),
        IntColumn(
          Address(AddressId),
          "id",
          ColumnConstraint(
            NotNull,
            NoForeignKey,
            NoDefault,
            PrimaryKey,
            NotUnique,
          ),
        ),
      ),
      #(
        Address(City),
        IntColumn(
          Address(City),
          "city",
          ColumnConstraint(
            Null,
            NoForeignKey,
            NoDefault,
            NotPrimaryKey,
            NotUnique,
          ),
        ),
      ),
      #(
        Address(Street),
        StringColumn(
          Address(Street),
          "street",
          ColumnConstraint(
            NotNull,
            NoForeignKey,
            Default(StringValue("Majeedhee Magu")),
            NotPrimaryKey,
            NotUnique,
          ),
        ),
      ),
    ]),
  ),
  dict.from_list([
    #(
      Address(AddressCustomer),
      ScalarValue(IntValue(1)),
    ),
    #(
      Address(City),
      ScalarValue(StringValue("Male'")),
    ),
    #(
      Address(Street),
      ScalarValue(StringValue("Majeedhee Magu")),
    ),
  ]),
  WhereEquals(
    ColumnValue(Address(AddressId)),
    ScalarValue(IntValue(100)),
  ),
))