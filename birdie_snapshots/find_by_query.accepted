---
version: 1.2.7
title: find_by query
file: ./test/entity_test.gleam
test_name: entity_find_by_query_test
---
EntityQuery(
  Entity(
    Table(
      "customers",
      [
        Customer(CustomerId),
        Customer(Name),
        Customer(Age),
      ],
      dict.from_list([
        #(
          Customer(Age),
          IntColumn(
            Customer(Age),
            "age",
            ColumnConstraint(
              Null,
              NoForeignKey,
              NoDefault,
              NotPrimaryKey,
              NotUnique,
            ),
          ),
        ),
        #(
          Customer(CustomerId),
          IntColumn(
            Customer(CustomerId),
            "id",
            ColumnConstraint(
              NotNull,
              NoForeignKey,
              NoDefault,
              PrimaryKey,
              NotUnique,
            ),
          ),
        ),
        #(
          Customer(Name),
          StringColumn(
            Customer(Name),
            "name",
            ColumnConstraint(
              NotNull,
              NoForeignKey,
              Default(StringValue("John Doe")),
              NotPrimaryKey,
              NotUnique,
            ),
          ),
        ),
      ]),
    ),
    Transformer(
      //fn(a) { ... },
      //fn(a) { ... },
      //fn(a) { ... },
      //fn(a) { ... },
      //fn(a) { ... },
      //fn(a, b) { ... },
      //fn(a, b) { ... },
      //fn(a, b) { ... },
      //fn(a, b) { ... },
      //fn(a, b) { ... },
      //fn(a, b) { ... },
      //fn(a, b) { ... },
      //fn(a) { ... },
      //fn(a) { ... },
      //fn(a) { ... },
      //fn() { ... },
      //fn(a, b) { ... },
      //fn(a, b, c, d) { ... },
    ),
    //fn(a) { ... },
  ),
  Query(
    [
      Table(
        "customers",
        [
          Customer(CustomerId),
          Customer(Name),
          Customer(Age),
        ],
        dict.from_list([
          #(
            Customer(Age),
            IntColumn(
              Customer(Age),
              "age",
              ColumnConstraint(
                Null,
                NoForeignKey,
                NoDefault,
                NotPrimaryKey,
                NotUnique,
              ),
            ),
          ),
          #(
            Customer(CustomerId),
            IntColumn(
              Customer(CustomerId),
              "id",
              ColumnConstraint(
                NotNull,
                NoForeignKey,
                NoDefault,
                PrimaryKey,
                NotUnique,
              ),
            ),
          ),
          #(
            Customer(Name),
            StringColumn(
              Customer(Name),
              "name",
              ColumnConstraint(
                NotNull,
                NoForeignKey,
                Default(StringValue("John Doe")),
                NotPrimaryKey,
                NotUnique,
              ),
            ),
          ),
        ]),
      ),
    ],
    [
      Customer(CustomerId),
      Customer(Name),
      Customer(Age),
    ],
    [],
    WhereEquals(
      ColumnValue(Customer(Name)),
      ScalarValue(StringValue("John Doe")),
    ),
    NotChecked,
  ),
)